/* Simulation code for Reference_1 generated by the OpenModelica Compiler OpenModelica 1.18.0. */
#if !defined(Reference_1__MODEL_H)
#define Reference_1__MODEL_H

#include "openmodelica.h"
#include "openmodelica_func.h"
#include "simulation_data.h"
#include "simulation/simulation_info_json.h"
#include "simulation/simulation_runtime.h"
#include "util/omc_error.h"
#include "util/parallel_helper.h"
#include "simulation/solver/model_help.h"
#include "simulation/solver/delay.h"
#include "simulation/solver/linearSystem.h"
#include "simulation/solver/nonlinearSystem.h"
#include "simulation/solver/mixedSystem.h"
#include "simulation/solver/spatialDistribution.h"

#if defined(__cplusplus)
extern "C" {
#endif

#include <string.h>

#include "Reference_1_functions.h"

#define Modelica_Blocks_Tables_Internal_getNextTimeEvent_index 0
#define Modelica_Blocks_Tables_Internal_getTable1DAbscissaUmax_index 1
#define Modelica_Blocks_Tables_Internal_getTable1DAbscissaUmin_index 2
#define Modelica_Blocks_Tables_Internal_getTable1DValue_index 3
#define Modelica_Blocks_Tables_Internal_getTable1DValueNoDer_index 4
#define Modelica_Blocks_Tables_Internal_getTable2DAbscissaUmax_index 5
#define Modelica_Blocks_Tables_Internal_getTable2DAbscissaUmin_index 6
#define Modelica_Blocks_Tables_Internal_getTable2DValue_index 7
#define Modelica_Blocks_Tables_Internal_getTimeTableTmax_index 8
#define Modelica_Blocks_Tables_Internal_getTimeTableTmin_index 9
#define Modelica_Blocks_Tables_Internal_getTimeTableValue_index 10
#define Modelica_Blocks_Tables_Internal_getTimeTableValueNoDer_index 11
#define Modelica_Blocks_Types_ExternalCombiTable1D_constructor_index 12
#define Modelica_Blocks_Types_ExternalCombiTable1D_destructor_index 13
#define Modelica_Blocks_Types_ExternalCombiTable2D_constructor_index 14
#define Modelica_Blocks_Types_ExternalCombiTable2D_destructor_index 15
#define Modelica_Blocks_Types_ExternalCombiTimeTable_constructor_index 16
#define Modelica_Blocks_Types_ExternalCombiTimeTable_destructor_index 17
#define Modelica_Media_Water_IF97__Utilities_BaseIF97_Basic_tsat_index 18
#define Modelica_SIunits_Conversions_from__deg_index 19
#define Modelica_SIunits_Conversions_to__degC_index 20
#define Modelica_Utilities_Files_splitPathName_index 21
#define Modelica_Utilities_Streams_close_index 22
#define Modelica_Utilities_Streams_error_index 23
#define Modelica_Utilities_Streams_readLine_index 24
#define Modelica_Utilities_Strings_compare_index 25
#define Modelica_Utilities_Strings_find_index 26
#define Modelica_Utilities_Strings_findLast_index 27
#define Modelica_Utilities_Strings_isEmpty_index 28
#define Modelica_Utilities_Strings_isEqual_index 29
#define Modelica_Utilities_Strings_length_index 30
#define Modelica_Utilities_Strings_repeat_index 31
#define Modelica_Utilities_Strings_scanInteger_index 32
#define Modelica_Utilities_Strings_scanReal_index 33
#define Modelica_Utilities_Strings_substring_index 34
#define Modelica_Utilities_Strings_syntaxError_index 35
#define Modelica_Utilities_Strings_Advanced_scanInteger_index 36
#define Modelica_Utilities_Strings_Advanced_scanReal_index 37
#define Modelica_Utilities_Strings_Advanced_skipWhiteSpace_index 38
#define Modelica_Utilities_System_command_index 39
#define Reference__1_Medium_ThermodynamicState_index 40
#define SolarTherm_Media_MoltenSalt_MoltenSalt__utilities_T__h_index 41
#define SolarTherm_Media_MoltenSalt_MoltenSalt__utilities_rho__T_index 42
#define SolarTherm_Models_CSP_CRS_Receivers__omcQReceiverSimple_24receiver_Medium_ThermodynamicState_index 43
#define SolarTherm_Models_Fluid_Sensors__omcQTemperature_24temperature_Medium_ThermodynamicState_index 44
#define SolarTherm_Models_PowerBlocks__omcQPowerBlockModel_24powerBlock_Medium_ThermodynamicState_index 45
#define SolarTherm_Models_Sources_SolarFunctions_aparentSolarZenith_index 46
#define SolarTherm_Models_Sources_SolarFunctions_eclipticLongitude_index 47
#define SolarTherm_Models_Sources_SolarFunctions_elevationAngle_index 48
#define SolarTherm_Models_Sources_SolarFunctions_julianDay_index 49
#define SolarTherm_Models_Sources_SolarFunctions_solarAzimuth_index 50
#define SolarTherm_Models_Sources_SolarFunctions_solarZenith_index 51
#define SolarTherm_Models_Sources_SolarModel__omcQSun_24sun_solarPosition_index 52
#define SolarTherm_Models_Sources_Weather_Metadata_index 53
#define SolarTherm_Models_Sources_Weather_checkVersion_index 54
#define SolarTherm_Models_Sources_Weather_getMetadata_index 55
#define SolarTherm_Models_Sources_Weather_weatherFileChecker_index 56
#define SolarTherm_Models_Storage_Tank__omcQTank_24tankCold_Medium_ThermodynamicState_index 57
#define SolarTherm_Models_Storage_Tank__omcQTank_24tankHot_Medium_ThermodynamicState_index 58

extern void Reference_1_callExternalObjectDestructors(DATA *_data, threadData_t *threadData);
#if !defined(OMC_NUM_NONLINEAR_SYSTEMS) || OMC_NUM_NONLINEAR_SYSTEMS>0
extern void Reference_1_initialNonLinearSystem(int nNonLinearSystems, NONLINEAR_SYSTEM_DATA *data);
#endif
#if !defined(OMC_NUM_LINEAR_SYSTEMS) || OMC_NUM_LINEAR_SYSTEMS>0
#endif
#if !defined(OMC_NUM_MIXED_SYSTEMS) || OMC_NUM_MIXED_SYSTEMS>0
#endif
#if !defined(OMC_NO_STATESELECTION)
extern void Reference_1_initializeStateSets(int nStateSets, STATE_SET_DATA* statesetData, DATA *data);
#endif
extern int Reference_1_functionAlgebraics(DATA *data, threadData_t *threadData);
extern int Reference_1_function_storeDelayed(DATA *data, threadData_t *threadData);
extern int Reference_1_function_storeSpatialDistribution(DATA *data, threadData_t *threadData);
extern int Reference_1_function_initSpatialDistribution(DATA *data, threadData_t *threadData);
extern int Reference_1_updateBoundVariableAttributes(DATA *data, threadData_t *threadData);
extern int Reference_1_functionInitialEquations(DATA *data, threadData_t *threadData);
extern int Reference_1_functionInitialEquations_lambda0(DATA *data, threadData_t *threadData);
extern int Reference_1_functionRemovedInitialEquations(DATA *data, threadData_t *threadData);
extern int Reference_1_updateBoundParameters(DATA *data, threadData_t *threadData);
extern int Reference_1_checkForAsserts(DATA *data, threadData_t *threadData);
extern int Reference_1_function_ZeroCrossingsEquations(DATA *data, threadData_t *threadData);
extern int Reference_1_function_ZeroCrossings(DATA *data, threadData_t *threadData, double* gout);
extern int Reference_1_function_updateRelations(DATA *data, threadData_t *threadData, int evalZeroCross);
extern const char* Reference_1_zeroCrossingDescription(int i, int **out_EquationIndexes);
extern const char* Reference_1_relationDescription(int i);
extern void Reference_1_function_initSample(DATA *data, threadData_t *threadData);
extern int Reference_1_initialAnalyticJacobianG(void* data, threadData_t *threadData, ANALYTIC_JACOBIAN *jacobian);
extern int Reference_1_initialAnalyticJacobianA(void* data, threadData_t *threadData, ANALYTIC_JACOBIAN *jacobian);
extern int Reference_1_initialAnalyticJacobianB(void* data, threadData_t *threadData, ANALYTIC_JACOBIAN *jacobian);
extern int Reference_1_initialAnalyticJacobianC(void* data, threadData_t *threadData, ANALYTIC_JACOBIAN *jacobian);
extern int Reference_1_initialAnalyticJacobianD(void* data, threadData_t *threadData, ANALYTIC_JACOBIAN *jacobian);
extern int Reference_1_initialAnalyticJacobianF(void* data, threadData_t *threadData, ANALYTIC_JACOBIAN *jacobian);
extern int Reference_1_functionJacG_column(void* data, threadData_t *threadData, ANALYTIC_JACOBIAN *thisJacobian, ANALYTIC_JACOBIAN *parentJacobian);
extern int Reference_1_functionJacA_column(void* data, threadData_t *threadData, ANALYTIC_JACOBIAN *thisJacobian, ANALYTIC_JACOBIAN *parentJacobian);
extern int Reference_1_functionJacB_column(void* data, threadData_t *threadData, ANALYTIC_JACOBIAN *thisJacobian, ANALYTIC_JACOBIAN *parentJacobian);
extern int Reference_1_functionJacC_column(void* data, threadData_t *threadData, ANALYTIC_JACOBIAN *thisJacobian, ANALYTIC_JACOBIAN *parentJacobian);
extern int Reference_1_functionJacD_column(void* data, threadData_t *threadData, ANALYTIC_JACOBIAN *thisJacobian, ANALYTIC_JACOBIAN *parentJacobian);
extern int Reference_1_functionJacF_column(void* data, threadData_t *threadData, ANALYTIC_JACOBIAN *thisJacobian, ANALYTIC_JACOBIAN *parentJacobian);
extern const char* Reference_1_linear_model_frame(void);
extern const char* Reference_1_linear_model_datarecovery_frame(void);
extern int Reference_1_mayer(DATA* data, modelica_real** res, short *);
extern int Reference_1_lagrange(DATA* data, modelica_real** res, short *, short *);
extern int Reference_1_pickUpBoundsForInputsInOptimization(DATA* data, modelica_real* min, modelica_real* max, modelica_real*nominal, modelica_boolean *useNominal, char ** name, modelica_real * start, modelica_real * startTimeOpt);
extern int Reference_1_setInputData(DATA *data, const modelica_boolean file);
extern int Reference_1_getTimeGrid(DATA *data, modelica_integer * nsi, modelica_real**t);
extern void Reference_1_function_initSynchronous(DATA * data, threadData_t *threadData);
extern void Reference_1_function_updateSynchronous(DATA * data, threadData_t *threadData, long clockIndex);
extern int Reference_1_function_equationsSynchronous(DATA * data, threadData_t *threadData, long clockIndex);
extern void Reference_1_read_input_fmu(MODEL_DATA* modelData, SIMULATION_INFO* simulationData);
extern void Reference_1_function_savePreSynchronous(DATA *data, threadData_t *threadData);
extern int Reference_1_inputNames(DATA* data, char ** names);
extern int Reference_1_dataReconciliationInputNames(DATA* data, char ** names);
extern int Reference_1_initializeDAEmodeData(DATA *data, DAEMODE_DATA*);
extern int Reference_1_functionLocalKnownVars(DATA*, threadData_t*);
extern int Reference_1_symbolicInlineSystem(DATA*, threadData_t*);

#include "Reference_1_literals.h"




#if defined(HPCOM) && !defined(_OPENMP)
  #error "HPCOM requires OpenMP or the results are wrong"
#endif
#if defined(_OPENMP)
  #include <omp.h>
#else
  /* dummy omp defines */
  #define omp_get_max_threads() 1
#endif

#if defined(__cplusplus)
}
#endif

#endif /* !defined(Reference_1__MODEL_H) */


