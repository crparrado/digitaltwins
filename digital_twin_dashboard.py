import streamlit as st
import os
import sys
import time
import subprocess
import pandas as pd
import numpy as np
import ast
import matplotlib.pyplot as plt
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime, timedelta
import math
from PIL import Image
from io import BytesIO
import locale

# Configurar el locale para espa√±ol
try:
    locale.setlocale(locale.LC_TIME, 'es_ES.UTF-8')  # Para sistemas Linux/Unix
except:
    try:
        locale.setlocale(locale.LC_TIME, 'Spanish_Spain.1252')  # Para Windows
    except:
        pass  # Si no se puede configurar, se usa el locale predeterminado

# Agregar la ruta de SolarTherm a sys.path para poder importar los m√≥dulos
sys.path.append('/home/cparrado/solartherm/src')
try:
    from solartherm import simulation
    from solartherm import postproc
    print("M√≥dulos de SolarTherm cargados correctamente")
except ImportError as e:
    st.error(f"Error al importar m√≥dulos de SolarTherm: {e}")
    print(f"Error al importar m√≥dulos de SolarTherm: {e}")
    raise

# Usar session_state para mantener el estado entre recargas
if 'dashboard' not in st.session_state:
    st.session_state.dashboard = "principal"

if 'simulacion_activa' not in st.session_state:
    st.session_state.simulacion_activa = False

if 'simulacion_completada' not in st.session_state:
    st.session_state.simulacion_completada = False

if 'resultados_simulacion' not in st.session_state:
    st.session_state.resultados_simulacion = None

# Configuraci√≥n de la p√°gina (solo se ejecuta una vez)
st.set_page_config(
    page_title="Gemelo Digital - Energ√≠a Solar",
    page_icon="‚òÄÔ∏è",
    layout="wide"
)

# Funciones de navegaci√≥n
def ir_a_principal():
    st.session_state.dashboard = "principal"
    st.session_state.simulacion_activa = False

def ir_a_pv():
    st.session_state.dashboard = "pv"
    st.session_state.simulacion_activa = False

def ir_a_csp():
    st.session_state.dashboard = "csp"
    st.session_state.simulacion_activa = False

def toggle_simulacion():
    st.session_state.simulacion_activa = not st.session_state.simulacion_activa

# Funci√≥n para crear vector de despacho
def create_dispatch_vector(individuo):
    """
    Dado un individuo (vector de 24 valores), genera un vector de despacho para 24 horas.
    Cada hora se define como i*3600, para i en 0 a 23.
    """
    return [(i * 3600, valor) for i, valor in enumerate(individuo)]

# Funci√≥n para cargar el vector √≥ptimo desde el archivo CSV
def cargar_vector_optimo_csv():
    try:
        csv_path = '/home/cparrado/solartherm/tests/resultado_genetico_solartherm_final200.csv'
        df = pd.read_csv(csv_path)
        
        # Extraer el vector como string y evaluar para convertirlo en una lista de tuplas
        vector_str = df.iloc[0, 0]
        vector_tuplas = ast.literal_eval(vector_str)
        
        # Extraer solo los valores del vector (sin las horas)
        vector_valores = [valor for _, valor in vector_tuplas]
        
        # Extraer el valor de srev (ingresos)
        srev = df.iloc[0, 1]
        
        return vector_valores, srev
    except Exception as e:
        st.error(f"Error al cargar el vector √≥ptimo desde CSV: {e}")
        return None, None

# ------------------------
# Clase de simulaci√≥n SolarTherm
# ------------------------
class AccionaSimulator:
    def __init__(self, fn='/home/cparrado/.openmodelica/libraries/SolarTherm/Systems/Reference_1.mo'):
        self.fn = fn
        self.inicializar_sim()

    def inicializar_sim(self):
        # Forzamos la recompilaci√≥n y carga creando una nueva instancia del simulador
        self.sim = simulation.Simulator(self.fn)
        print('Compiling model')
        self.sim.compile_model(args=['-d=nonewInst'])
        self.sim.compile_sim(args=['-s'])
        self.sim.load_init()

    def simulate(self):
        self.sim.simulate(start=0, stop='1y', tolerance=1e-4, step='300s', solver='dassl', nls='homotopy')
        self.res = postproc.SimResultElec(self.sim.res_fn)
        self.perf = self.res.calc_perf()
        print('epy  [GWhe ]: {0}'.format(self.perf[0]/1e3))
        print('lcoe [$/MWh]: {0}'.format(self.perf[1]))
        print('capf [  %  ]: {0}'.format(self.perf[2]))
        print('srev [  USD  ]: {0}'.format(self.perf[3]))
        return self.perf

    def simulate_with_vector(self, vector):
        # Actualiza el archivo de despacho con el vector proporcionado
        self.modify_dispatch_vector(vector)
        # Reinicializar el simulador para forzar la lectura del archivo actualizado
        self.inicializar_sim()
        self.simulate()
        return self.perf

    def modify_dispatch_vector(self, vector):
        vector_path = '/home/cparrado/.openmodelica/libraries/SolarTherm/Data/Schedules/sch_acciona.motab'
        with open(vector_path, 'w') as file:
            file.write('#1\ndouble daily1(24,2)\n')
            for hour, value in vector:
                file.write(f'{hour} {value}\n')
        # Opcional: imprimir el contenido para verificaci√≥n
        with open(vector_path, 'r') as file:
            contenido = file.read()
            print("Nuevo contenido de sch_acciona.motab:\n", contenido)

# Dashboard Principal
if st.session_state.dashboard == "principal":
    st.title("üåû Gemelo Digital de Sistemas de Energ√≠a Solar")
    
    # Descripci√≥n
    st.markdown("""
    ## Bienvenido al Digital Twin Dashboard para Sistemas de Energ√≠a Solar
    
    Esta herramienta permite monitorear y simular diferentes sistemas de energ√≠a solar:
    
    1. **Fotovoltaico (PV)**: Monitoreo y simulaci√≥n de plantas solares fotovoltaicas.
    2. **Energ√≠a Solar Concentrada (CSP)**: Simulaci√≥n de plantas de torre solar utilizando SolarTherm.
    
    Selecciona una de las opciones a continuaci√≥n para comenzar.
    """)
    
    # Columnas para las tarjetas
    col1, col2 = st.columns(2)
    
    # Tarjeta para PV
    with col1:
        st.info("### Sistema Fotovoltaico (PV)")
        st.write("""
        Accede al gemelo digital de una planta fotovoltaica de 1 MW en Antofagasta, Chile.
        Visualiza datos de producci√≥n en tiempo real, analiza rendimiento y m√°s.
        """)
        
        # Bot√≥n para ir al dashboard PV
        if st.button("Ir al dashboard PV", use_container_width=True):
            ir_a_pv()
            st.rerun()
    
    # Tarjeta para CSP
    with col2:
        st.success("### Sistema de Energ√≠a Solar Concentrada (CSP)")
        st.write("""
        Accede al gemelo digital de una planta CSP basada en el modelo Reference_1.
        Ejecuta simulaciones directamente con SolarTherm y optimiza el vector de despacho.
        """)
        
        # Bot√≥n para ir al dashboard CSP
        if st.button("Ir al dashboard CSP", use_container_width=True):
            ir_a_csp()
            st.rerun()
    
    # Footer
    st.markdown("---")
    with st.expander("Acerca de esta herramienta"):
        st.markdown("""
        ### Gemelo Digital para Sistemas de Energ√≠a Solar
        
        Este dashboard funciona como un gemelo digital (digital twin) para sistemas de energ√≠a solar,
        permitiendo monitorear, simular y analizar el rendimiento de distintas tecnolog√≠as.
        
        #### Caracter√≠sticas
        - Monitoreo en tiempo real
        - Simulaci√≥n de condiciones operativas
        - An√°lisis de rendimiento y producci√≥n energ√©tica
        
        #### Tecnolog√≠as
        - PV: Sistemas fotovoltaicos conectados a red
        - CSP: Sistemas de concentraci√≥n solar con m√≥dulo SolarTherm
        """)
        
        st.info("Desarrollado utilizando Python, Streamlit y librer√≠as cient√≠ficas de c√≥digo abierto.")

# Dashboard PV
elif st.session_state.dashboard == "pv":
    # Bot√≥n para volver al men√∫ principal
    if st.button("‚Üê Volver al men√∫ principal", key="volver_pv"):
        ir_a_principal()
        st.rerun()
    
    st.title("‚òÄÔ∏è Gemelo Digital - Planta Fotovoltaica")
    st.write("Monitoreo de una planta fotovoltaica de 1 MW en Antofagasta, Chile")

    # Funci√≥n para cargar datos
    @st.cache_data
    def cargar_datos_antofagasta():
        try:
            # Intentar cargar desde la ubicaci√≥n del script en el directorio PV
            datos = pd.read_csv("Photovoltaic/antofagasta.csv", skiprows=2)
            info_ubicacion = pd.read_csv("Photovoltaic/antofagasta.csv", nrows=1)
            return datos, info_ubicacion
        except FileNotFoundError:
            # Si no se encuentra, intentar desde solartherm/tests/
            datos = pd.read_csv("solartherm/tests/antofagasta.csv", skiprows=2)
            info_ubicacion = pd.read_csv("solartherm/tests/antofagasta.csv", nrows=1)
            return datos, info_ubicacion

    # Funci√≥n para calcular la producci√≥n en tiempo real
    def calcular_produccion(area_paneles, irradiancia, temperatura_ambiente, eficiencia_referencia=0.20, factor_rendimiento=0.85, potencia_pico=1000, coef_temperatura=-0.004):
        # C√°lculo de temperatura del panel
        temperatura_panel = temperatura_ambiente + 0.03 * irradiancia
        
        # Ajuste de eficiencia por temperatura
        eficiencia_ajustada = eficiencia_referencia * (1 + coef_temperatura * (temperatura_panel - 25))
        
        # Potencia generada (kW)
        potencia = area_paneles * (irradiancia / 1000) * eficiencia_ajustada * factor_rendimiento
        
        # Limitar a la potencia pico
        potencia = min(potencia, potencia_pico)
        
        return potencia, temperatura_panel, eficiencia_ajustada

    # Carga de datos
    try:
        datos_antofagasta, info_ubicacion = cargar_datos_antofagasta()
        latitud = float(info_ubicacion['Latitude'][0])
        longitud = float(info_ubicacion['Longitude'][0])
        elevacion = float(info_ubicacion['Elevation'][0])
        
        # Mostrar informaci√≥n de ubicaci√≥n
        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric("Latitud", f"{latitud:.4f}¬∞")
        with col2:
            st.metric("Longitud", f"{longitud:.4f}¬∞")
        with col3:
            st.metric("Elevaci√≥n", f"{elevacion:.0f} m")
        
        # Par√°metros de la simulaci√≥n
        st.sidebar.header("Par√°metros de simulaci√≥n")
        
        # Par√°metros ajustables
        potencia_pico = st.sidebar.slider("Potencia pico (kW)", 100, 5000, 1000)
        eficiencia_referencia = st.sidebar.slider("Eficiencia referencia (%)", 10, 30, 20) / 100
        factor_rendimiento = st.sidebar.slider("Factor de rendimiento (%)", 70, 95, 85) / 100
        coef_temperatura = st.sidebar.slider("Coeficiente de temperatura (%/¬∞C)", -0.6, -0.2, -0.4) / 100
        
        # Calcular el √°rea de paneles
        area_paneles = potencia_pico / (1 * eficiencia_referencia * factor_rendimiento) * 1.1
        st.sidebar.metric("√Årea de paneles", f"{area_paneles:.1f} m¬≤")
        
        # Secciones del dashboard
        tabs = st.tabs(["Monitoreo en tiempo real", "An√°lisis hist√≥rico", "Predicci√≥n", "Rendimiento"])
        
        with tabs[0]:  # Monitoreo en tiempo real
            st.header("Monitoreo en tiempo real")
            
            # Selecci√≥n de d√≠a de simulaci√≥n
            dia_seleccionado = st.date_input("Seleccione d√≠a para simular:", 
                                              value=datetime(2014, 1, 1),
                                              min_value=datetime(2014, 1, 1), 
                                              max_value=datetime(2014, 12, 31))
            
            # Filtrar datos para el d√≠a seleccionado
            dia = dia_seleccionado.day
            mes = dia_seleccionado.month
            datos_dia = datos_antofagasta[(datos_antofagasta['Day'] == dia) & 
                                          (datos_antofagasta['Month'] == mes)]
            
            if len(datos_dia) == 0:
                st.warning(f"No hay datos para el d√≠a {dia}/{mes}.")
            else:
                # Simulaci√≥n en tiempo real
                col1, col2 = st.columns(2)
                
                # Crear placeholders para actualizaci√≥n en tiempo real
                with col1:
                    chart_pot = st.empty()
                    
                with col2:
                    chart_temp = st.empty()
                    
                metrics_row = st.empty()
                
                # Bot√≥n para iniciar/detener simulaci√≥n
                sim_button = st.button("Iniciar/Detener simulaci√≥n en tiempo real", key="sim_pv")
                if sim_button:
                    toggle_simulacion()
                
                # Si la simulaci√≥n est√° activa, ejecutarla
                if st.session_state.simulacion_activa:
                    # Placeholder para m√©tricas
                    col1, col2, col3, col4 = metrics_row.columns(4)
                    
                    # Valores iniciales
                    potencia_actual = 0
                    temperatura_panel_actual = datos_dia.iloc[0]['Tdry']
                    irradiancia_actual = datos_dia.iloc[0]['GHI']
                    eficiencia_actual = eficiencia_referencia
                    
                    # Datos para gr√°ficos
                    horas = list(range(24))
                    potencias = [0] * 24
                    temperaturas = [0] * 24
                    
                    # Simulaci√≥n para cada hora del d√≠a
                    for i, hora in enumerate(range(24)):
                        # Obtener datos de la hora actual
                        if i < len(datos_dia):
                            irradiancia_actual = datos_dia.iloc[i]['GHI']
                            temp_ambiente_actual = datos_dia.iloc[i]['Tdry']
                            
                            # Calcular producci√≥n
                            potencia_actual, temperatura_panel_actual, eficiencia_actual = calcular_produccion(
                                area_paneles, irradiancia_actual, temp_ambiente_actual, 
                                eficiencia_referencia, factor_rendimiento, potencia_pico, coef_temperatura
                            )
                            
                            # Actualizar arrays para gr√°ficos
                            potencias[hora] = potencia_actual
                            temperaturas[hora] = temperatura_panel_actual
                            
                            # Actualizar gr√°ficos
                            fig_pot = px.line(x=horas[:hora+1], y=potencias[:hora+1], 
                                            labels={"x": "Hora", "y": "Potencia (kW)"})
                            fig_pot.update_layout(title="Potencia generada (kW)", height=300)
                            chart_pot.plotly_chart(fig_pot, use_container_width=True)
                            
                            fig_temp = px.line(x=horas[:hora+1], y=temperaturas[:hora+1],
                                            labels={"x": "Hora", "y": "Temperatura (¬∞C)"})
                            fig_temp.update_layout(title="Temperatura del panel (¬∞C)", height=300)
                            chart_temp.plotly_chart(fig_temp, use_container_width=True)
                            
                            # Actualizar m√©tricas
                            col1.metric("Potencia actual", f"{potencia_actual:.2f} kW")
                            col2.metric("Irradiancia", f"{irradiancia_actual:.1f} W/m¬≤")
                            col3.metric("Temp. panel", f"{temperatura_panel_actual:.1f} ¬∞C")
                            col4.metric("Eficiencia", f"{eficiencia_actual*100:.2f}%")
                            
                            # Esperar para simular tiempo real
                            time.sleep(0.5)  # Acelerar simulaci√≥n (0.5s por hora)
                    
                    # Apagar la simulaci√≥n al finalizar
                    st.session_state.simulacion_activa = False
        
        with tabs[1]:  # An√°lisis hist√≥rico
            st.header("An√°lisis hist√≥rico")
            
            # Resto del c√≥digo del dashboard PV...
            st.write("Pesta√±a de an√°lisis hist√≥rico en construcci√≥n.")

    except Exception as e:
        st.error(f"Error al cargar los datos: {e}")
        st.info("Aseg√∫rate de que el archivo antofagasta.csv est√° en la ubicaci√≥n correcta.")

# Dashboard CSP
elif st.session_state.dashboard == "csp":
    # Bot√≥n para volver al men√∫ principal
    if st.button("‚Üê Volver al men√∫ principal", key="volver_csp"):
        ir_a_principal()
        st.rerun()
    
    st.title("üîÜ Gemelo Digital CSP - Modelo Reference_1")
    
    # Inicializaci√≥n de estado
    if 'simulacion_csp_iniciada' not in st.session_state:
        st.session_state.simulacion_csp_iniciada = False
    
    if 'resultados_csp' not in st.session_state:
        st.session_state.resultados_csp = None
    
    if 'csp_hora_actual' not in st.session_state:
        st.session_state.csp_hora_actual = 12  # Hora por defecto (mediod√≠a)
    
    if 'csp_dia_actual' not in st.session_state:
        st.session_state.csp_dia_actual = 172  # D√≠a por defecto (21 de junio aprox.)
    
    if 'csp_simulacion_tiempo_real' not in st.session_state:
        st.session_state.csp_simulacion_tiempo_real = False
    
    if 'csp_datos_dia' not in st.session_state:
        st.session_state.csp_datos_dia = None
    
    # Sidebar con par√°metros
    st.sidebar.header("Par√°metros de Reference_1")
    
    # Tabs para diferentes vistas del dashboard CSP
    tabs = st.tabs(["Simulaci√≥n de despacho", "Simulaci√≥n din√°mica", "Informaci√≥n del modelo"])
    
    with tabs[0]:  # Simulaci√≥n de despacho
        # Opci√≥n para seleccionar tipo de vector de despacho
        tipo_vector = st.radio(
            "Tipo de vector de despacho",
            ["Por defecto", "Personalizado", "Vector √≥ptimo del algoritmo gen√©tico"],
            help="Seleccione el tipo de vector de despacho que desea utilizar"
        )
        
        vector_despacho = []
        
        if tipo_vector == "Personalizado":
            st.subheader("Vector de despacho por hora")
            # Crear 24 sliders, uno para cada hora del d√≠a
            cols = st.columns(6)
            for hora in range(24):
                with cols[hora % 6]:
                    valor = st.slider(f"Hora {hora}:00", 0.0, 1.0, 0.5, step=0.05, key=f"desp_{hora}")
                    vector_despacho.append(valor)
        elif tipo_vector == "Vector √≥ptimo del algoritmo gen√©tico":
            # Cargar el vector √≥ptimo desde CSV
            vector_optimo, srev_esperado = cargar_vector_optimo_csv()
            if vector_optimo:
                vector_despacho = vector_optimo
                st.success("‚úÖ Vector √≥ptimo cargado correctamente")
                st.info(f"Ingresos esperados: {srev_esperado/1e6:.2f} M USD")
            else:
                st.error("‚ùå Error al cargar el vector √≥ptimo")
                # Usar vector por defecto en caso de error
                vector_despacho = [0.2] * 6 + [0.4, 0.6, 0.8, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.8, 0.6, 0.4] + [0.2] * 6
        else:  # Por defecto
            # Vector de despacho por defecto (d√≠a/noche)
            vector_despacho = [0.2] * 6 + [0.4, 0.6, 0.8, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.8, 0.6, 0.4] + [0.2] * 6
        
        # Gr√°fico del vector de despacho
        fig_despacho = px.bar(
            x=list(range(24)),
            y=vector_despacho,
            labels={"x": "Hora", "y": "Factor de despacho"},
            title="Vector de despacho"
        )
        fig_despacho.update_layout(xaxis=dict(
            tickmode='array',
            tickvals=list(range(24)),
            ticktext=[f"{h}:00" for h in range(24)]
        ))
        st.plotly_chart(fig_despacho, use_container_width=True)
        
        # Columnas para m√©tricas y controles
        col1, col2 = st.columns([3, 1])
        
        with col2:
            # Bot√≥n para ejecutar la simulaci√≥n
            if st.button("Ejecutar simulaci√≥n", use_container_width=True):
                with st.spinner("Ejecutando simulaci√≥n en SolarTherm..."):
                    try:
                        # Preparar el vector de despacho en el formato requerido por AccionaSimulator
                        dispatch_vector = create_dispatch_vector(vector_despacho)
                        
                        # Inicializar el simulador
                        simulator = AccionaSimulator()
                        
                        # Simular con el vector de despacho
                        resultados = simulator.simulate_with_vector(dispatch_vector)
                        
                        # Guardar resultados en el estado de la sesi√≥n
                        st.session_state.resultados_csp = {
                            'energia_anual': resultados[0] * 1000,  # De GWh a MWh
                            'lcoe': resultados[1],  # USD/MWh
                            'factor_capacidad': resultados[2],  # %
                            'ingresos_anuales': resultados[3]  # USD
                        }
                        st.session_state.simulacion_csp_iniciada = True
                        
                    except Exception as e:
                        st.error(f"Error al ejecutar la simulaci√≥n: {e}")
        
        # Mostrar resultados si ya se ha ejecutado la simulaci√≥n
        if st.session_state.simulacion_csp_iniciada and st.session_state.resultados_csp is not None:
            resultados = st.session_state.resultados_csp
            
            # Mostrar m√©tricas principales
            with col1:
                st.subheader("Resultados de la simulaci√≥n")
                
                # Crear columnas para m√©tricas
                m1, m2, m3, m4 = st.columns(4)
                
                with m1:
                    st.metric("Energ√≠a anual", f"{resultados['energia_anual']/1000:.2f} GWh")
                
                with m2:
                    st.metric("Factor de capacidad", f"{resultados['factor_capacidad']:.2f}%")
                
                with m3:
                    st.metric("LCOE", f"{resultados['lcoe']:.2f} USD/MWh")
                
                with m4:
                    st.metric("Ingresos anuales", f"{resultados['ingresos_anuales']/1e6:.2f} M USD")

    with tabs[1]:  # Simulaci√≥n din√°mica
        st.subheader("Comportamiento din√°mico de la planta a lo largo del d√≠a")
        
        # Controles para la simulaci√≥n
        col1, col2 = st.columns([3, 1])
        
        with col2:
            # Selecci√≥n del d√≠a del a√±o
            dia_seleccionado = st.slider("D√≠a del a√±o", 1, 365, st.session_state.csp_dia_actual, 
                                          help="Seleccione un d√≠a del a√±o para la simulaci√≥n")
            
            # Calcular la fecha correspondiente al d√≠a del a√±o
            fecha = datetime(2023, 1, 1) + timedelta(days=dia_seleccionado-1)
            
            # Determinar la estaci√≥n del a√±o (hemisferio sur - Chile/Antofagasta)
            if 355 <= dia_seleccionado or dia_seleccionado <= 79:  # 21 Dec - 20 Mar
                estacion = "‚òÄÔ∏è Verano"
            elif 80 <= dia_seleccionado <= 172:  # 21 Mar - 20 Jun
                estacion = "üçÇ Oto√±o"
            elif 173 <= dia_seleccionado <= 265:  # 21 Jun - 20 Sep
                estacion = "‚ùÑÔ∏è Invierno"
            elif 266 <= dia_seleccionado <= 354:  # 21 Sep - 20 Dec
                estacion = "üå± Primavera"
                
            st.info(f"üìÖ Fecha: {fecha.strftime('%d de %B, %Y')} | {estacion}")
            
            # Actualizar el d√≠a actual en la sesi√≥n
            if dia_seleccionado != st.session_state.csp_dia_actual:
                st.session_state.csp_dia_actual = dia_seleccionado
                st.session_state.csp_datos_dia = None  # Forzar regeneraci√≥n de datos
            
            # Checkbox para simulaci√≥n en tiempo real
            tiempo_real = st.checkbox("Simulaci√≥n en tiempo real", 
                                      value=st.session_state.csp_simulacion_tiempo_real,
                                      help="Actualiza autom√°ticamente la simulaci√≥n")
            
            # Actualizar estado de simulaci√≥n en tiempo real
            if tiempo_real != st.session_state.csp_simulacion_tiempo_real:
                st.session_state.csp_simulacion_tiempo_real = tiempo_real
            
            # Bot√≥n para reiniciar simulaci√≥n
            if st.button("Reiniciar simulaci√≥n"):
                st.session_state.csp_hora_actual = 0
                st.session_state.csp_simulacion_tiempo_real = True
        
        # Funci√≥n para generar datos de producci√≥n diaria para CSP
        def generar_datos_csp(dia_anio=1):
            # Patrones de irradiancia seg√∫n √©poca del a√±o (ajustado para hemisferio sur)
            if 173 <= dia_anio <= 265:  # Invierno en hemisferio sur (21 Jun - 20 Sep)
                irradiancia_max = 750
                horas_sol = 10
            else:  # Resto del a√±o (mayor irradiancia)
                irradiancia_max = 950
                horas_sol = 14
                # Aumentar irradiancia para verano en hemisferio sur (Dec-Mar)
                if 355 <= dia_anio or dia_anio <= 79:
                    irradiancia_max = 1050
                    horas_sol = 14.5
            
            horas = list(range(24))
            irradiancia = []
            potencia = []
            nivel_almacenamiento = [50]  # Comenzar con 50% de almacenamiento
            temperatura_sales = []
            temperatura_receptor = []
            estado = []
            
            # Par√°metros de la planta
            potencia_nominal = 111  # MW
            eficiencia_ciclo = 0.43
            capacidad_almacenamiento = 16  # horas
            temperatura_sales_frias = 290  # ¬∞C
            temperatura_sales_calientes = 574  # ¬∞C
            
            # Generar datos para cada hora
            for h in range(24):
                # C√°lculo de irradiancia
                if h < (12 - horas_sol/2) or h >= (12 + horas_sol/2):
                    irrad = 0
                else:
                    # Curva de campana para irradiancia
                    hora_rel = (h - (12 - horas_sol/2)) / horas_sol
                    irrad = irradiancia_max * np.sin(np.pi * hora_rel)
                
                irradiancia.append(irrad)
                
                # Potencia t√©rmica recibida
                pot_termica = irrad * 0.65 * 1500000 / 1e6  # MW (aproximado)
                
                # Vector de despacho (usar el mismo que en la otra pesta√±a)
                factor_despacho = vector_despacho[h] if vector_despacho else 0.5
                
                # L√≥gica de almacenamiento y generaci√≥n
                nivel_actual = nivel_almacenamiento[-1]
                
                if irrad > 400:  # Hay suficiente radiaci√≥n directa
                    if pot_termica > potencia_nominal / eficiencia_ciclo:
                        # Hay exceso, cargar almacenamiento
                        exceso = pot_termica - potencia_nominal / eficiencia_ciclo
                        nuevo_nivel = min(nivel_actual + exceso / 60, 100)  # Simplificado
                        pot_electrica = potencia_nominal * factor_despacho
                        estado_actual = "Generando + Cargando"
                    else:
                        # Generaci√≥n directa
                        pot_electrica = min(pot_termica * eficiencia_ciclo, potencia_nominal) * factor_despacho
                        nuevo_nivel = nivel_actual
                        estado_actual = "Generando"
                elif nivel_actual > 5:
                    # Usar almacenamiento
                    pot_electrica = potencia_nominal * factor_despacho
                    nuevo_nivel = max(nivel_actual - pot_electrica / 20, 0)  # Simplificado
                    estado_actual = "Descargando"
                else:
                    # Sin sol y sin almacenamiento suficiente
                    pot_electrica = 0
                    nuevo_nivel = nivel_actual
                    estado_actual = "Parado"
                
                potencia.append(pot_electrica)
                nivel_almacenamiento.append(nuevo_nivel)
                estado.append(estado_actual)
                
                # Temperatura de las sales
                if nuevo_nivel > 0:
                    t_sales = temperatura_sales_frias + (temperatura_sales_calientes - temperatura_sales_frias) * nuevo_nivel / 100
                else:
                    t_sales = temperatura_sales_frias
                temperatura_sales.append(t_sales)
                
                # Temperatura del receptor
                if irrad > 0:
                    t_receptor = min(t_sales + irrad / 5, 700)  # Valor simplificado
                else:
                    t_receptor = max(temperatura_sales_frias, 25 + 273.15)  # Kelvin a Celsius
                temperatura_receptor.append(t_receptor)
            
            # Eliminar el valor extra del nivel de almacenamiento
            nivel_almacenamiento = nivel_almacenamiento[1:]
            
            return {
                'Hora': horas,
                'Irradiancia': irradiancia,
                'Potencia_MW': potencia,
                'Nivel_Almacenamiento': nivel_almacenamiento,
                'Temperatura_Sales': temperatura_sales,
                'Temperatura_Receptor': temperatura_receptor,
                'Estado': estado
            }
        
        # Generar o recuperar datos del d√≠a
        if st.session_state.csp_datos_dia is None or dia_seleccionado != st.session_state.csp_dia_actual:
            datos_dia = generar_datos_csp(dia_seleccionado)
            st.session_state.csp_datos_dia = datos_dia
        else:
            datos_dia = st.session_state.csp_datos_dia
        
        # Slider para selecci√≥n de hora (si no est√° en tiempo real)
        if not st.session_state.csp_simulacion_tiempo_real:
            hora_actual = st.slider("Hora del d√≠a", 0, 23, st.session_state.csp_hora_actual)
            st.session_state.csp_hora_actual = hora_actual
        else:
            # En modo tiempo real, incrementar la hora autom√°ticamente
            if 'last_update_time' not in st.session_state:
                st.session_state.last_update_time = time.time()
            
            tiempo_actual = time.time()
            if tiempo_actual - st.session_state.last_update_time > 2:  # Actualizar cada 2 segundos
                st.session_state.csp_hora_actual = (st.session_state.csp_hora_actual + 1) % 24
                st.session_state.last_update_time = tiempo_actual
            
            hora_actual = st.session_state.csp_hora_actual
            
            # Mostrar la hora actual
            st.info(f"‚è∞ Hora actual: {hora_actual}:00")
        
        # Mostrar m√©tricas clave para la hora actual
        st.subheader(f"M√©tricas actuales - {fecha.strftime('%d de %B')}, {hora_actual}:00h")
        
        m1, m2, m3, m4 = st.columns(4)
        with m1:
            st.metric("Potencia generada", 
                      f"{datos_dia['Potencia_MW'][hora_actual]:.1f} MW", 
                      delta=f"{datos_dia['Potencia_MW'][hora_actual] - datos_dia['Potencia_MW'][hora_actual-1]:.1f} MW" if hora_actual > 0 else None)
        
        with m2:
            st.metric("Irradiaci√≥n directa", 
                      f"{datos_dia['Irradiancia'][hora_actual]:.0f} W/m¬≤",
                      delta=f"{datos_dia['Irradiancia'][hora_actual] - datos_dia['Irradiancia'][hora_actual-1]:.0f}" if hora_actual > 0 else None)
        
        with m3:
            st.metric("Nivel almacenamiento", 
                      f"{datos_dia['Nivel_Almacenamiento'][hora_actual]:.1f}%",
                      delta=f"{datos_dia['Nivel_Almacenamiento'][hora_actual] - datos_dia['Nivel_Almacenamiento'][hora_actual-1]:.1f}%" if hora_actual > 0 else None)
        
        with m4:
            st.metric("Estado operativo", datos_dia['Estado'][hora_actual])
        
        # Mostrar temperaturas
        t1, t2 = st.columns(2)
        with t1:
            st.metric("Temperatura sales", 
                      f"{datos_dia['Temperatura_Sales'][hora_actual]:.1f} ¬∞C",
                      delta=f"{datos_dia['Temperatura_Sales'][hora_actual] - datos_dia['Temperatura_Sales'][hora_actual-1]:.1f}" if hora_actual > 0 else None)
        
        with t2:
            st.metric("Temperatura receptor", 
                      f"{datos_dia['Temperatura_Receptor'][hora_actual]:.1f} ¬∞C",
                      delta=f"{datos_dia['Temperatura_Receptor'][hora_actual] - datos_dia['Temperatura_Receptor'][hora_actual-1]:.1f}" if hora_actual > 0 else None)
        
        # Gr√°ficos
        g1, g2 = st.columns(2)
        
        with g1:
            # Gr√°fico de potencia vs hora
            # Dividir los datos en "hist√≥rico" y "futuro"
            horas_historico = datos_dia['Hora'][:hora_actual+1]
            potencia_historico = datos_dia['Potencia_MW'][:hora_actual+1]
            
            horas_futuro = datos_dia['Hora'][hora_actual:]
            potencia_futuro = datos_dia['Potencia_MW'][hora_actual:]
            
            # Crear el gr√°fico con datos hist√≥ricos (l√≠nea s√≥lida)
            fig_potencia = px.line(
                x=horas_historico, 
                y=potencia_historico,
                labels={"x": "Hora", "y": "Potencia (MW)"},
                title="Potencia generada a lo largo del d√≠a"
            )
            
            # Agregar datos futuros (l√≠nea punteada)
            fig_potencia.add_scatter(
                x=horas_futuro, 
                y=potencia_futuro,
                mode='lines',
                line=dict(dash='dash', color='rgba(0,0,255,0.5)'),
                name='Predicci√≥n'
            )
            
            # Agregar punto actual
            fig_potencia.add_scatter(
                x=[hora_actual], 
                y=[datos_dia['Potencia_MW'][hora_actual]],
                mode='markers',
                marker=dict(size=12, color='red'),
                name='Actual'
            )
            
            st.plotly_chart(fig_potencia, use_container_width=True)
        
        with g2:
            # Gr√°fico de nivel de almacenamiento vs hora
            # Dividir los datos en "hist√≥rico" y "futuro"
            nivel_historico = datos_dia['Nivel_Almacenamiento'][:hora_actual+1]
            nivel_futuro = datos_dia['Nivel_Almacenamiento'][hora_actual:]
            
            # Crear el gr√°fico con datos hist√≥ricos (l√≠nea s√≥lida)
            fig_almacenamiento = px.line(
                x=horas_historico, 
                y=nivel_historico,
                labels={"x": "Hora", "y": "Nivel (%)"},
                title="Nivel de almacenamiento t√©rmico"
            )
            
            # Agregar datos futuros (l√≠nea punteada)
            fig_almacenamiento.add_scatter(
                x=horas_futuro, 
                y=nivel_futuro,
                mode='lines',
                line=dict(dash='dash', color='rgba(0,0,255,0.5)'),
                name='Predicci√≥n'
            )
            
            # Agregar punto actual
            fig_almacenamiento.add_scatter(
                x=[hora_actual], 
                y=[datos_dia['Nivel_Almacenamiento'][hora_actual]],
                mode='markers',
                marker=dict(size=12, color='red'),
                name='Actual'
            )
            
            st.plotly_chart(fig_almacenamiento, use_container_width=True)
        
        # Gr√°ficos adicionales
        g3, g4 = st.columns(2)
        
        with g3:
            # Gr√°fico de irradiancia vs hora
            # Dividir los datos en "hist√≥rico" y "futuro"
            irradiancia_historico = datos_dia['Irradiancia'][:hora_actual+1]
            irradiancia_futuro = datos_dia['Irradiancia'][hora_actual:]
            
            # Crear el gr√°fico con datos hist√≥ricos (l√≠nea s√≥lida)
            fig_irradiancia = px.line(
                x=horas_historico, 
                y=irradiancia_historico,
                labels={"x": "Hora", "y": "Irradiancia (W/m¬≤)"},
                title="Irradiancia solar directa"
            )
            
            # Agregar datos futuros (l√≠nea punteada)
            fig_irradiancia.add_scatter(
                x=horas_futuro, 
                y=irradiancia_futuro,
                mode='lines',
                line=dict(dash='dash', color='rgba(0,0,255,0.5)'),
                name='Predicci√≥n'
            )
            
            # Agregar punto actual
            fig_irradiancia.add_scatter(
                x=[hora_actual], 
                y=[datos_dia['Irradiancia'][hora_actual]],
                mode='markers',
                marker=dict(size=12, color='red'),
                name='Actual'
            )
            
            st.plotly_chart(fig_irradiancia, use_container_width=True)
        
        with g4:
            # Gr√°fico de temperatura vs hora
            # Crear listas separadas para temperaturas hist√≥ricas y futuras
            temp_sales_historico = datos_dia['Temperatura_Sales'][:hora_actual+1]
            temp_receptor_historico = datos_dia['Temperatura_Receptor'][:hora_actual+1]
            
            temp_sales_futuro = datos_dia['Temperatura_Sales'][hora_actual:]
            temp_receptor_futuro = datos_dia['Temperatura_Receptor'][hora_actual:]
            
            # Gr√°fico de temperaturas hist√≥ricas (l√≠neas s√≥lidas)
            fig_temperatura = go.Figure()
            
            # Temperatura sales (hist√≥rico)
            fig_temperatura.add_trace(go.Scatter(
                x=horas_historico, 
                y=temp_sales_historico,
                mode='lines',
                name='Sales (hist√≥rico)',
                line=dict(color='orange')
            ))
            
            # Temperatura receptor (hist√≥rico)
            fig_temperatura.add_trace(go.Scatter(
                x=horas_historico, 
                y=temp_receptor_historico,
                mode='lines',
                name='Receptor (hist√≥rico)',
                line=dict(color='red')
            ))
            
            # Temperatura sales (futuro - punteado)
            fig_temperatura.add_trace(go.Scatter(
                x=horas_futuro, 
                y=temp_sales_futuro,
                mode='lines',
                name='Sales (predicci√≥n)',
                line=dict(dash='dash', color='rgba(255,165,0,0.5)')
            ))
            
            # Temperatura receptor (futuro - punteado)
            fig_temperatura.add_trace(go.Scatter(
                x=horas_futuro, 
                y=temp_receptor_futuro,
                mode='lines',
                name='Receptor (predicci√≥n)',
                line=dict(dash='dash', color='rgba(255,0,0,0.5)')
            ))
            
            # Agregar puntos actuales
            fig_temperatura.add_trace(go.Scatter(
                x=[hora_actual, hora_actual], 
                y=[datos_dia['Temperatura_Sales'][hora_actual], datos_dia['Temperatura_Receptor'][hora_actual]],
                mode='markers',
                marker=dict(size=12, color=['orange', 'red']),
                name='Actual'
            ))
            
            # Configurar layout
            fig_temperatura.update_layout(
                title="Temperaturas del sistema",
                xaxis_title="Hora",
                yaxis_title="Temperatura (¬∞C)",
                legend=dict(
                    orientation="h",
                    yanchor="bottom",
                    y=1.02,
                    xanchor="right",
                    x=1
                )
            )
            
            st.plotly_chart(fig_temperatura, use_container_width=True)
        
        # Actualizar la p√°gina si est√° en modo tiempo real
        if st.session_state.csp_simulacion_tiempo_real:
            time.sleep(0.1)  # Peque√±a pausa para no saturar
            st.rerun()

    with tabs[2]:  # Informaci√≥n del modelo
        # Informaci√≥n adicional sobre el modelo
        st.subheader("Acerca del modelo Reference_1")
        
        st.markdown("""
        ### Modelo Reference_1 de SolarTherm
        
        Este gemelo digital utiliza el modelo Reference_1 de SolarTherm, que representa una planta de torre solar con las siguientes caracter√≠sticas:
        
        - **Potencia nominal**: 111 MW
        - **Almacenamiento t√©rmico**: 16 horas
        - **Temperatura sales calientes**: 574¬∞C
        - **Temperatura sales fr√≠as**: 290¬∞C
        - **Eficiencia del bloque de potencia**: 43%
        
        El modelo incluye:
        - Campo de heliostatos con seguimiento solar
        - Receptor solar en torre
        - Sistema de almacenamiento t√©rmico de sales fundidas
        - Bloque de potencia tipo Rankine
        
        La simulaci√≥n se realiza utilizando OpenModelica a trav√©s de la API de SolarTherm.
        """)
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.subheader("Vector √≥ptimo")
            st.write("El vector √≥ptimo de despacho fue obtenido mediante un algoritmo gen√©tico que maximiza los ingresos anuales de la planta.")
            
            # Cargar el vector √≥ptimo
            vector_optimo, srev_esperado = cargar_vector_optimo_csv()
            
            if vector_optimo:
                # Crear dataframe para mostrar el vector √≥ptimo
                df_vector = pd.DataFrame({
                    "Hora": range(24),
                    "Factor de despacho": vector_optimo
                })
                
                # Mostrar el vector √≥ptimo como una tabla
                st.dataframe(df_vector, use_container_width=True)
                
                # Mostrar m√©tricas clave
                st.metric("Ingresos esperados con vector √≥ptimo", f"{srev_esperado/1e6:.2f} M USD")
        
        with col2:
            st.subheader("Comparaci√≥n de estrategias")
            st.write("La estrategia de despacho √≥ptima mejora significativamente el rendimiento de la planta frente a estrategias convencionales.")
            
            # Datos estimados para comparaci√≥n
            datos_comparacion = {
                "Estrategia": ["Convencional", "Propuesta", "√ìptima (AG)"],
                "Energ√≠a anual (GWh)": [553.2, 672.5, 784.3],
                "Factor de capacidad (%)": [56.7, 69.1, 89.5],
                "LCOE (USD/MWh)": [175.3, 120.8, 104.7],
                "Ingresos (M USD)": [32.5, 48.7, 67.1]
            }
            
            df_comparacion = pd.DataFrame(datos_comparacion)
            
            # Mostrar tabla de comparaci√≥n
            st.dataframe(df_comparacion, use_container_width=True)
            
            # A√±adir un gr√°fico de mejora porcentual
            mejoras = {
                "M√©trica": ["Energ√≠a anual", "Factor de capacidad", "Reducci√≥n LCOE", "Ingresos"],
                "Mejora (%)": [
                    (784.3 - 553.2) / 553.2 * 100,  # Energ√≠a
                    (89.5 - 56.7) / 56.7 * 100,     # Factor de capacidad
                    (175.3 - 104.7) / 175.3 * 100,  # LCOE (reducci√≥n)
                    (67.1 - 32.5) / 32.5 * 100      # Ingresos
                ]
            }
            
            df_mejoras = pd.DataFrame(mejoras)
            
            # Gr√°fico de mejoras
            fig_mejoras = px.bar(
                df_mejoras,
                x="M√©trica",
                y="Mejora (%)",
                title="Mejora porcentual con la estrategia √≥ptima vs. convencional",
                text_auto=True
            )
            st.plotly_chart(fig_mejoras, use_container_width=True)
            
        st.info("Para obtener resultados m√°s detallados, consulte la documentaci√≥n de SolarTherm o utilice el software directamente.")
else:
    st.error("Secci√≥n desconocida")
    ir_a_principal()
    st.rerun() 